<?php

namespace Plugin\CrossBorder1\Repository;

use Doctrine\Common\Persistence\ManagerRegistry;
use Eccube\Entity\Category;
use Eccube\Repository\AbstractRepository;
use Eccube\Repository\CategoryRepository;
use Symfony\Component\HttpFoundation\RequestStack;


/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PluginCategoryRepository extends AbstractRepository
{
    private $langContentRepository;

    private $request;

    private $categoryRepository;

    public function __construct(
        ManagerRegistry $registry,
        LangContentRepository $langContentRepository,
        RequestStack $request,
        CategoryRepository $categoryRepository
    )
    {
        parent::__construct(
            $registry,
            Category::class
        );
        $this->langContentRepository = $langContentRepository;
        $this->request = $request;
        $this->categoryRepository = $categoryRepository;
    }



    /**
     * カテゴリ一覧を取得する.
     *
     * 引数 $Parent を指定した場合は, 指定したカテゴリの子以下を取得する.
     *
     * @param Category|null $Parent 指定の親カテゴリ
     * @param bool $flat trueの場合, 階層化されたカテゴリを一つの配列にまとめる
     *
     * @return Category[] カテゴリの配列
     */
    public function getList(Category $Parent = null, $flat = false)
    {
        $qb = $this->categoryRepository->createQueryBuilder('c1')
            ->select('c1, c2, c3, c4, c5')
            ->leftJoin('c1.Children', 'c2')
            ->leftJoin('c2.Children', 'c3')
            ->leftJoin('c3.Children', 'c4')
            ->leftJoin('c4.Children', 'c5')
            ->orderBy('c1.sort_no', 'DESC')
            ->addOrderBy('c2.sort_no', 'DESC')
            ->addOrderBy('c3.sort_no', 'DESC')
            ->addOrderBy('c4.sort_no', 'DESC')
            ->addOrderBy('c5.sort_no', 'DESC');

        if ($Parent) {
            $qb->where('c1.Parent = :Parent')->setParameter('Parent', $Parent);
        } else {
            $qb->where('c1.Parent IS NULL');
        }
        $Categories = $qb->getQuery()
            ->useResultCache(true, $this->getCacheLifetime())
            ->getResult();

        if ($flat) {
            $array = [];
            foreach ($Categories as $Category) {
                $array = array_merge($array, $Category->getSelfAndDescendants());
            }
            $Categories = $array;
        }

        $new_categories = [];
        foreach($Categories as $Category){
            $Category = $this->getCategoryLangContent($Category);
            $new_categories[] = $Category;
        }

        return $new_categories;
    }

    public function getCategoryLangContent(Category $Category)
    {
        $children = $Category->getChildren()->getValues();
        if(!empty($children)){
            foreach($children as $child){
                $this->getCategoryLangContent($child);
            }
        }

        $LangContent = $this->langContentRepository->findOneBy(
            [
                'entity' => get_class($Category),
                'entity_id' => $Category->getId(),
                'language' => $this->request->getCurrentRequest()->getLocale(),
            ]
        );
        if(!is_null($LangContent)){
            $Category->setName($LangContent->getContent());
        }
        return $Category;
    }
}
